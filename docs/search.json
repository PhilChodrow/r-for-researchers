[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Quick Introduction to R For Researchers",
    "section": "",
    "text": "This website is designed to give a quick introduction to the R programming language for practicing researchers who may not be specialists in data science or statistics. It was written to support researchers at the ICERM 2022-2023 Summer Program “Data Science and Social Justice: Networks, Policy, and Education.”"
  },
  {
    "objectID": "1_installation.html",
    "href": "1_installation.html",
    "title": "1  Getting Started",
    "section": "",
    "text": "In this short set of notes, we’ll install our needed software packages and ensure that they are operational. There are three primary pieces of software that we’ll interact with in the coming sessions:\nThese pieces work together as follows:"
  },
  {
    "objectID": "1_installation.html#install-your-tools",
    "href": "1_installation.html#install-your-tools",
    "title": "1  Getting Started",
    "section": "1.1 Install Your Tools",
    "text": "1.1 Install Your Tools\nThese steps are easy, but there’s a lot of downloading and installing to do. You may want to leave around 30 minutes to complete these steps.\n\nDownload and install the R programming language.\nDownload and install the RStudio IDE. You want the Free version of RStudio Desktop that corresponds to your computer’s operating system.\nDownload the Quarto Command Line Interface (CLI) that corresponds to your computer’s operating system."
  },
  {
    "objectID": "1_installation.html#install-the-tidyverse",
    "href": "1_installation.html#install-the-tidyverse",
    "title": "1  Getting Started",
    "section": "1.2 Install the Tidyverse",
    "text": "1.2 Install the Tidyverse\nWe’re actually going to be using a very specific set of packages for R, which are often collectively called the Tidyverse. To install the Tidyverse, first open RStudio. You’ll be greeted by a window that looks a bit like this:\n\n\n\n\n\nFigure 1.1: The panels of the RStudio IDE. In this image, the console is the panel at the bottom left. Image credit: Anastasia Ushakova and Milan Valasek.\n\n\n\n\nLocate the console. When you first open RStudio, the console will typically contain some information about your R installation. If you click the console area, you should see a blinking cursor beside a >. In Figure 1.1, this is in the very bottom left of the image. This is the first and simplest way to interact with R.\nType the following command in the console, exactly as written.\n\ninstall.packages(\"tidyverse\")\n\nThen, hit Enter. You’ll see a series of messages flash across the console.\nThe installation might take a while. Once you see messages stop flashing, check the console output to see if there are any obvious error messages (usually highlighted in red).\nTo test your installation, paste the following code into your console, and hit enter. You’ll likely see some output as the tidyverse library is loaded (made ready to use). The last thing you see, however, should be the output below.\n\nlibrary(tidyverse)\n\"I installed all the software I need!\" %>% print()\n\n[1] \"I installed all the software I need!\"\n\n\nIf so, you are good to go!\n\n\n\n\n\nYes, you specifically."
  },
  {
    "objectID": "2_navigating.html",
    "href": "2_navigating.html",
    "title": "2  Navigating Analysis Documents",
    "section": "",
    "text": "In the previous section, you ran a few small snippets of code in the R console. This is a convenient way to try very simple things, but there’s a problem – the console isn’t very good for remembering or revising code. So, the classic analytical workflow for R is:\nWe’re going to riff on this workflow a bit. Rather than a simple script, which only contains code and comments, we’ll write our code in a Quarto document. This gives us some handy tools for sending code to the console in RStudio, and also makes it easy to package up the results of our analysis in a way that we can conveniently share with others."
  },
  {
    "objectID": "2_navigating.html#create-a-quarto-document",
    "href": "2_navigating.html#create-a-quarto-document",
    "title": "2  Navigating Analysis Documents",
    "section": "2.1 Create a Quarto Document",
    "text": "2.1 Create a Quarto Document\nIn RStudio, navigate to File -> New File -> Quarto Document. Give your document a name and list yourself as an author.\n\n\n\n\n\nSetting up a first Quarto document. Please deselect the visual markdown editor (bottom checkbox)."
  },
  {
    "objectID": "2_navigating.html#yaml-metadata",
    "href": "2_navigating.html#yaml-metadata",
    "title": "2  Navigating Analysis Documents",
    "section": "2.2 YAML Metadata",
    "text": "2.2 YAML Metadata\nAfter creating your document, you’ll see some text. The top five lines will look something like this:\n---\ntitle: \"My Document\"\nauthor: \"Me!\"\nformat: html\n---\nThis is YAML metadata. You can think of it as the “options” for your document. For now, we won’t touch it.\nDelete all text in your new document except the YAML metadata. That is, you should delete everything from line 6 down."
  },
  {
    "objectID": "2_navigating.html#code-chunks",
    "href": "2_navigating.html#code-chunks",
    "title": "2  Navigating Analysis Documents",
    "section": "2.3 Code Chunks",
    "text": "2.3 Code Chunks\nIn Quarto, code is organized into chunks. An R code chunk opens with three backticks followed by {r}: ```{r} , on their own line. It closes with three more backticks, again on their own line:\n```{r}\n# code goes here\n```\n\n\n\n\n\n\nExercise: In RStudio, type the shortcut Ctrl+Alt+I (Windows) or Cmd+Option+I (Mac) to automatically create a code chunk.\n\n\n\n\n\n\n\n\n\nExercise: Write the following code in the chunk you just created:\n\nprint(\"Social justice!\")\n\nThen, do one of two things:\n\nIf you like keyboard shortcuts, type Ctrl+Shift+Enter (Windows) or Cmd+Shift+Return (Mac) while your cursor is inside the code chunk. You’ll see your message printed in the console.\nIf you don’t like keyboard shortcuts, you can instead click the little green play button  ▶  at the top right of the code chunk."
  },
  {
    "objectID": "2_navigating.html#markdown",
    "href": "2_navigating.html#markdown",
    "title": "2  Navigating Analysis Documents",
    "section": "2.4 Markdown",
    "text": "2.4 Markdown\nMarkdown is a markup language that allows you to create rich text features while writing in plain text. It was created by John Gruber. You use Markdown to communicate your findings.\n\n\n\n\n\n\nExercise: Paste the following text into your Quarto document, outside your R code chunk.\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n\n- Unnumbered lists\n    - Nested items\n- A **bold** item. \n- Even more items\n\n1. Numbered lists\n2. Another item\n    1. A nested numbered item.\n3. An *italic* item."
  },
  {
    "objectID": "2_navigating.html#preview-your-document",
    "href": "2_navigating.html#preview-your-document",
    "title": "2  Navigating Analysis Documents",
    "section": "2.5 Preview Your Document",
    "text": "2.5 Preview Your Document\nClick the Render button, which is marked by a blue arrow  ➜ . After a few moments, you’ll see a rendered version of your document appear. This rendering includes both nicely formatted text (from your markdown) and computational output from your code (in this case, just some printed text).\n\n\n\n\n\nHell yeah."
  },
  {
    "objectID": "3_wrangling.html",
    "href": "3_wrangling.html",
    "title": "3  Introduction to Data Wrangling",
    "section": "",
    "text": "R is a versatile programming language that offers solutions to a wide variety of computational tasks. However, what R is truly specialized for – what it’s arguably better at than anything else – is data analysis and statistics. It has an especially robust set of tools for tabular data: data arranged in rows and columns. In this set of notes, we’ll practice some techniques for acquiring, managing, and analyzing tabular data."
  },
  {
    "objectID": "3_wrangling.html#acquire-data",
    "href": "3_wrangling.html#acquire-data",
    "title": "3  Introduction to Data Wrangling",
    "section": "3.1 Acquire Data",
    "text": "3.1 Acquire Data\nEarlier in Chapter 1, we asked you to download the tidyverse package for R. To use the tools in that package, we need to load it into our workspace. We do this using the library command: Unlike when we installed the package, this time, we don’t need to put quotation marks \"\" around the name tidyverse.\n\nlibrary(tidyverse)\n\nNow we are ready to acquire our data set. Many kinds of data set are stored as one or more CSV (comma-separated values) files. Here’s the location of our data. For convenience, we’re using a data set hosted online, but we can also\n\nartwork_path <- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-12/artwork.csv\"\n\nThe read_csv() function accepts a path to a file and reads it into R. We then save the result to a variable called artwork.\n\nartwork <- read_csv(artwork_path)"
  },
  {
    "objectID": "3_wrangling.html#make-friends-with-your-data",
    "href": "3_wrangling.html#make-friends-with-your-data",
    "title": "3  Introduction to Data Wrangling",
    "section": "3.2 Make Friends With Your Data",
    "text": "3.2 Make Friends With Your Data\nThe data set we just downloaded is a list of artwork in the collections of the Tate Art Museum (as of 2014). You can learn more about the data set here.\nWe now have a data set to play with! Let’s take a look. Simply typing the name of the data set and sending it to the console will result in a large printout with a lot of information.\n\nhead(artwork) \n\n# A tibble: 6 × 20\n     id accession_number artist        artistRole artistId title dateText medium\n  <dbl> <chr>            <chr>         <chr>         <dbl> <chr> <chr>    <chr> \n1  1035 A00001           Blake, Robert artist           38 A Fi… date no… Water…\n2  1036 A00002           Blake, Robert artist           38 Two … date no… Graph…\n3  1037 A00003           Blake, Robert artist           38 The … ?c.1785  Graph…\n4  1038 A00004           Blake, Robert artist           38 Six … date no… Graph…\n5  1039 A00005           Blake, Willi… artist           39 The … 1826–7,… Line …\n6  1040 A00006           Blake, Willi… artist           39 Ciam… 1826–7,… Line …\n# … with 12 more variables: creditLine <chr>, year <dbl>,\n#   acquisitionYear <dbl>, dimensions <chr>, width <dbl>, height <dbl>,\n#   depth <dbl>, units <chr>, inscription <chr>, thumbnailCopyright <lgl>,\n#   thumbnailUrl <chr>, url <chr>\n\n\nThis is somewhat useful, but it’s hard to get a big-picture view of what’s happening. One way is to use the the glimpse() function:\n\nglimpse(artwork) \n\nRows: 69,201\nColumns: 20\n$ id                 <dbl> 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 104…\n$ accession_number   <chr> \"A00001\", \"A00002\", \"A00003\", \"A00004\", \"A00005\", \"…\n$ artist             <chr> \"Blake, Robert\", \"Blake, Robert\", \"Blake, Robert\", …\n$ artistRole         <chr> \"artist\", \"artist\", \"artist\", \"artist\", \"artist\", \"…\n$ artistId           <dbl> 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39,…\n$ title              <chr> \"A Figure Bowing before a Seated Old Man with his A…\n$ dateText           <chr> \"date not known\", \"date not known\", \"?c.1785\", \"dat…\n$ medium             <chr> \"Watercolour, ink, chalk and graphite on paper. Ver…\n$ creditLine         <chr> \"Presented by Mrs John Richmond 1922\", \"Presented b…\n$ year               <dbl> NA, NA, 1785, NA, 1826, 1826, 1826, 1826, 1826, 182…\n$ acquisitionYear    <dbl> 1922, 1922, 1922, 1922, 1919, 1919, 1919, 1919, 191…\n$ dimensions         <chr> \"support: 394 x 419 mm\", \"support: 311 x 213 mm\", \"…\n$ width              <dbl> 394, 311, 343, 318, 243, 240, 242, 246, 241, 243, 2…\n$ height             <dbl> 419, 213, 467, 394, 335, 338, 334, 340, 335, 340, 3…\n$ depth              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ units              <chr> \"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm…\n$ inscription        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ thumbnailCopyright <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ thumbnailUrl       <chr> \"http://www.tate.org.uk/art/images/work/A/A00/A0000…\n$ url                <chr> \"http://www.tate.org.uk/art/artworks/blake-a-figure…\n\n\nThis output tells us:\n\nOur data set has nrow(artwork) rows. In well-formatted tabular data, each row corresponds to an observation or individual. In our data set, each row corresponds to an individual piece of artwork.\nOur data set has ncol(artwork) columns. In well-formatted tabular data, each column corresponds to a feature or attribute of each observation. In our data set, columns include the artist, the medium, the date of creation, the date of acquisition, and many other attributes.\nOur columns have different data types. Some of them are numbers (dbl), some of them are text strings (chr), and one of them is a true/false logical vector (lgl). We can"
  },
  {
    "objectID": "3_wrangling.html#the-pipe",
    "href": "3_wrangling.html#the-pipe",
    "title": "3  Introduction to Data Wrangling",
    "section": "3.3 The Pipe",
    "text": "3.3 The Pipe\nIf you have prior programming experience, you may be used to operating on variables with functions using a syntax like f(x), where f is a function and x is your variable. In the tidyverse framework for R, we often create data pipelines using an alternative syntax: the pipe operator, %>%. In this format, we write x %>% f() to achieve the same task. A convenient way to read this is “take variable x and do function f() to it.”\nSo, our glimpse above could have been written\n\nartwork %>% glimpse()\n\nwith the same effect. Try it and see!\nOne of the benefits of the pipe is that it allows us to easily compose operations on our data. So, we can write x %>% f() %>% g() instead of g(f(x)). A convenient way to write this is “take variable x, then do function f to it, then do function g to the result.”\nHere’s a simple example:\n\nartwork %>% \n    head(5) %>% # get only the first five rows\n    glimpse()\n\nThis is much more organized and easy to read than the equivalent glimpse(head(artwork, 5)), and this difference will only become more pronounced as we build progressively more complex data pipelines."
  },
  {
    "objectID": "3_wrangling.html#data-subsetting-select-and-filter",
    "href": "3_wrangling.html#data-subsetting-select-and-filter",
    "title": "3  Introduction to Data Wrangling",
    "section": "3.4 Data Subsetting: select and filter",
    "text": "3.4 Data Subsetting: select and filter\nLet’s now begin to operate on the data. The first thing we’re going to practice is grabbing subsets of the data. We’re going to consider two forms of subsetting: selecting a subset of columns and filtering a subset of rows.\nUse select to choose a subset of columns from your data.\n\nartwork %>%\n    select(title)\n\n# A tibble: 69,201 × 1\n   title                                                                        \n   <chr>                                                                        \n 1 A Figure Bowing before a Seated Old Man with his Arm Outstretched in Benedic…\n 2 Two Drawings of Frightened Figures, Probably for ‘The Approach of Doom’      \n 3 The Preaching of Warning. Verso: An Old Man Enthroned Between Two Groups of …\n 4 Six Drawings of Figures with Outstretched Arms                               \n 5 The Circle of the Lustful: Francesca da Rimini (‘The Whirlwind of Lovers’)   \n 6 Ciampolo the Barrator Tormented by the Devils                                \n 7 The Baffled Devils Fighting                                                  \n 8 The Six-Footed Serpent Attacking Agnolo Brunelleschi                         \n 9 The Serpent Attacking Buoso Donati                                           \n10 The Pit of Disease: The Falsifiers                                           \n# … with 69,191 more rows\n\n\nYou can select multiple columns at a time:\n\nartwork %>%\n    select(title, artist, year)\n\n# A tibble: 69,201 × 3\n   title                                                            artist  year\n   <chr>                                                            <chr>  <dbl>\n 1 A Figure Bowing before a Seated Old Man with his Arm Outstretch… Blake…    NA\n 2 Two Drawings of Frightened Figures, Probably for ‘The Approach … Blake…    NA\n 3 The Preaching of Warning. Verso: An Old Man Enthroned Between T… Blake…  1785\n 4 Six Drawings of Figures with Outstretched Arms                   Blake…    NA\n 5 The Circle of the Lustful: Francesca da Rimini (‘The Whirlwind … Blake…  1826\n 6 Ciampolo the Barrator Tormented by the Devils                    Blake…  1826\n 7 The Baffled Devils Fighting                                      Blake…  1826\n 8 The Six-Footed Serpent Attacking Agnolo Brunelleschi             Blake…  1826\n 9 The Serpent Attacking Buoso Donati                               Blake…  1826\n10 The Pit of Disease: The Falsifiers                               Blake…  1826\n# … with 69,191 more rows\n\n\nThere are fancy operators for selecting columns based on criteria, but these are usually conveniences rather than necessities.\n\n\nartwork %>%\n    select(contains(\"year\")) \nA more common operation is to filter rows according to a logical criterion. For example, we might want to create a new data set that contains only paintings acquired in the Tate after 1950:\n\nafter_1950 <- artwork %>% \n    filter(acquisitionYear > 1950)\n\nOur new data frame contains just 26113 rows, compared to the 69201 in the full data frame.\nIt is also possible to filter on multiple logical criteria. For example, maybe we want recently-acquired oil paintings on canvas:\n\nartwork %>% \n    filter(acquisitionYear > 1950, medium == \"Oil paint on canvas\")\n\nWe can compose filter and select to subset by both rows and columns, using %>%:\n\nartwork %>% \n    filter(acquisitionYear > 1950, medium == \"Oil paint on canvas\") %>% \n    select(artist, title, acquisitionYear)\n\n\n\n\n\n\n\nExercise: Grab the person next to you and try to create a table of artwork acquired in the 1970s (between 1970 and 1979, inclusive). Include only the columns for artist, year, and medium."
  },
  {
    "objectID": "3_wrangling.html#descriptive-data-analysis-summarize-and-group_by",
    "href": "3_wrangling.html#descriptive-data-analysis-summarize-and-group_by",
    "title": "3  Introduction to Data Wrangling",
    "section": "3.5 Descriptive Data Analysis: summarize() and group_by()",
    "text": "3.5 Descriptive Data Analysis: summarize() and group_by()\nLet’s now add our first set of tools for summarizing data. A summary is any operation that aggregates information from one or more columns of data, optionally by group. Some examples of summaries include:\n\nThe number of observations in the data, or in each group.\nThe mean, median, or standard deviation of some quantity.\nThe percentage of observations that match some criterion.\n\nYou compute summaries using the summarize function. You first give a name to your summary value, and then you specify a formula to compute it. The n() function just counts the number of rows:\n\nartwork %>%\n    summarize(num_records = n())\n\n# A tibble: 1 × 1\n  num_records\n        <int>\n1       69201\n\n\nThe result is a new data frame, this time with just one row and one column.\nWe can compute multiple summary variables simultaneously by separating name-formula pairs with a comma. For example, we can compute the earliest and latest dates on which artwork was acquired.\n\nartwork %>%\n    summarize(earliest_date = min(acquisitionYear),\n              latest_date   = max(acquisitionYear),\n              n = n())\n\n# A tibble: 1 × 3\n  earliest_date latest_date     n\n          <dbl>       <dbl> <int>\n1            NA          NA 69201\n\n\nWhoops! Those aren’t very good results. The reason we didn’t get the answer we wanted was that there are some missing values – encoded NA – in the acquisitionYear column. We can exclude those by passing the argument na.rm = TRUE to both min and max.[This also works for many other summarizing functions, like sum and mean.]\n\nartwork %>%\n    summarize(earliest_date = min(acquisitionYear, na.rm = TRUE),\n              latest_date   = max(acquisitionYear, na.rm = TRUE),\n              n = n())\n\n# A tibble: 1 × 3\n  earliest_date latest_date     n\n          <dbl>       <dbl> <int>\n1          1823        2013 69201\n\n\nThis is ok, but summarize gets really powerful when we combine it with group_by().\n\nartwork %>% \n    group_by(artist) %>% \n    summarize(earliest_date = min(acquisitionYear, na.rm = TRUE),\n              latest_date   = max(acquisitionYear, na.rm = TRUE),\n              n = n())\n\n# A tibble: 3,336 × 4\n   artist                 earliest_date latest_date     n\n   <chr>                          <dbl>       <dbl> <int>\n 1 ?British School                 1927        1927     1\n 2 Abakanowicz, Magdalena          2009        2009     4\n 3 Abbey, Edwin Austin             1924        1924     6\n 4 Abbott, Berenice                2010        2010     3\n 5 Abbott, Lemuel Francis          1885        1968     2\n 6 Abrahams, Ivor                  1975        1986   108\n 7 Absalon                         1997        1997     6\n 8 Abts, Tomma                     2006        2012     6\n 9 Acconci, Vito                   1982        2010     6\n10 Ackling, Roger                  1983        1983     1\n# … with 3,326 more rows\n\n\nWe now have a long table that tells us the earliest and latest acquisition dates for each artist represented in the collection.\n\nSorting: arrange()\nIn the case above, we had too many rows to conveniently visualize. In cases like these, it is often beneficial to bring certain rows to the top. We can do this by sorting, using the arrange() function. To sort by a column, just add that column as an argument to arrange. To sort in descending order, wrap the column name in desc():\n\nartwork %>% \n    group_by(artist) %>% \n    summarize(earliest_date = min(acquisitionYear, na.rm = TRUE),\n              latest_date   = max(acquisitionYear, na.rm = TRUE),\n              n = n()) %>% \n    arrange(desc(n))\n\n# A tibble: 3,336 × 4\n   artist                         earliest_date latest_date     n\n   <chr>                                  <dbl>       <dbl> <int>\n 1 Turner, Joseph Mallord William          1847        2007 39389\n 2 Jones, George                           1847        1997  1046\n 3 Moore, Henry, OM, CH                    1939        1994   623\n 4 Daniell, William                        1979        1979   612\n 5 Beuys, Joseph                           1972        2009   578\n 6 British (?) School                      1997        1997   388\n 7 Paolozzi, Sir Eduardo                   1958        2012   385\n 8 Flaxman, John                           1922        1997   287\n 9 Phillips, Esq Tom                       1971        2001   274\n10 Warhol, Andy                            1971        2013   272\n# … with 3,326 more rows\n\n\nArranging and viewing your data is a great way to find anomalies. For example, here it appears that Joseph Mallord William Turner was the artist in 39,389 pieces in the Tate collections. I’m not familiar enough with the collections to know whether this is a typo or, if not, what it means that Turner is attached to so many pieces."
  }
]